import Mathlib.Analysis.NormedSpace.lpSpace
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.Analysis.SpecialFunctions.Log.Basic

noncomputable
section

open Real ENNReal NNReal IsROrC BigOperators

-- A.1 Vectors and norms
/-
We will denote by H a vector space whose dimension may be infinite.
-/
variable (‚Ñç)
variable [NormedGroup ‚Ñç] [NormedAddCommGroup ‚Ñç] [NormedSpace ‚Ñù ‚Ñç]

-- A.1.1 Norms

/-
Definition A.1 A mapping Œ¶ : H ‚Üí R + is said to define a norm on H if it verifies the following
axioms:
‚Ä¢ definiteness: ‚àÄx ‚àà H, Œ¶(x) = 0 ‚áî x = 0;
‚Ä¢ homogeneity: ‚àÄx ‚àà H, ‚àÄŒ± ‚àà R, Œ¶(Œ±x) = |Œ±|Œ¶(x);
‚Ä¢ triangle inequality: ‚àÄx, y ‚àà H, Œ¶(x + y) ‚â§ Œ¶(x) + Œ¶(y).
-/
example : ‚Ñç ‚Üí ‚Ñù‚â•0 := fun x : ‚Ñç ‚Ü¶ ‚Äñx‚Äñ‚Çä

theorem definiteness : ‚àÄ x : ‚Ñç, ‚Äñx‚Äñ‚Çä = 0 ‚Üî x = 0 := fun x ‚Ü¶ nnnorm_eq_zero (a := x)
theorem homogenity : ‚àÄ x : ‚Ñç, ‚àÄ Œ± : ‚Ñù, ‚ÄñŒ± ‚Ä¢ x‚Äñ‚Çä = |Œ±| * ‚Äñx‚Äñ‚Çä := by
  intro x Œ±
  rw [nnnorm_smul]
  simp
theorem triangle_inequality : ‚àÄ x y : ‚Ñç, ‚Äñx + y‚Äñ‚Çä ‚â§ ‚Äñx‚Äñ‚Çä +  ‚Äñy‚Äñ‚Çä := nnnorm_add_le
/-
Examples of vector norms are the absolute value on ‚Ñù and the Euclidean (or L‚ÇÇ) norm on ‚Ñù·¥∫ .
-/
variable (‚Ñç' : ‚Ñï ‚Üí Type*) [‚àÄ i, NormedAddCommGroup (‚Ñç' i)]
example : ‚àÄ (x : lp ‚Ñç' 2), ‚Äñx‚Äñ = (‚àë' i, ‚Äñx i‚Äñ ^ (2 : ‚Ñù)) ^ (1 / (2 : ‚Ñù)) := fun x ‚Ü¶ lp.norm_eq_tsum_rpow (by norm_num) x

/-
More generally, for any p ‚â• 1 the L p norm is defined on R N as (A.1)
-/
example : ‚àÄ p ‚â• 1, (x : lp ‚Ñç' p) ‚Üí ‚Äñx‚Äñ = (‚àë' i, ‚Äñx i‚Äñ ^ (ENNReal.toReal p)) ^ (1 / (ENNReal.toReal p)) := by
  intro p hp‚ÇÅ x
  have : 0 < ENNReal.toReal p := by
    sorry
  apply lp.norm_eq_tsum_rpow this x

/-
The L 1 , L 2 , and L ‚àû norms are some of the most commonly used norms, where ‚Äñx‚Äñ‚àû = max j‚àà[N ] |x j|.
-/
example : ‚àÄ (x : lp ‚Ñç' ‚àû), ‚Äñx‚Äñ = ‚®Ü i, ‚Äñx i‚Äñ := lp.norm_eq_ciSup

/-
Two norms k ¬∑ k and k ¬∑ k 0 are said to be equivalent iff there exists Œ±, Œ≤ > 0 such that for all x ‚àà H,
(A.2)
-/
def equivalent (n‚ÇÅ n‚ÇÇ : NNNorm ‚Ñç) : Prop :=
  ‚àÉ Œ± Œ≤: ‚Ñù‚â•0, ‚àÄ x : ‚Ñç, Œ± * (n‚ÇÅ.nnnorm x) ‚â§ (n‚ÇÇ.nnnorm x) ‚àß (n‚ÇÇ.nnnorm x) ‚â§ Œ≤ * (n‚ÇÅ.nnnorm x)

/-
The following general inequalities relating these norms can be proven straightforwardly:
-/
-- lp ‚Ñç p „ÅØÊØîËºÉ„Åå„Åß„Åç„Å™„Åï„Åù„ÅÜ

/-
Definition A.2 (Hilbert space) A Hilbert space is a vector space equipped with an inner product
h¬∑, ¬∑i and that is complete (all Cauchy sequences are convergent). The inner product induces a
norm defined as follows:
-/
variable (ùïú ‚Ñç: Type*) [NormedAddCommGroup ‚Ñç] [IsROrC ùïú] [InnerProductSpace ùïú ‚Ñç]
local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú ‚Ñç _ x y

example : ‚àÄ x : ‚Ñç, ‚Äñx‚Äñ = Real.sqrt (re ‚ü™x, x‚ü´) := norm_eq_sqrt_inner


-- A.1.2 Dual norms

/-
Definition A.3 Let k ¬∑ k be a norm on R N . Then, the dual norm k ¬∑ k ‚àó associated to k ¬∑ k is the
norm defined by
-/
#check lp.tsum_mul_le_mul_norm

theorem holder_inequality {p q : ‚Ñù‚â•0‚àû} (hpq : p.toReal.IsConjugateExponent q.toReal)
    (x : lp ‚Ñç' p) (y : lp ‚Ñç' q) : ‚àë' i, ‚Äñx i‚Äñ * ‚Äñy i‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ := by
  by_cases h : x = 0 ‚à® y = 0
  . -- The statement holds trivially for x = 0 or y = 0
    rcases h with hx | hy
    . rw [hx]
      simp
    . rw [hy]
      simp
  . -- thus, we can assume x ‚â† 0 and y ‚â† 0.
    rw [not_or, ‚Üê Ne, ‚Üê Ne] at h
    have ‚ü®hnx, hny‚ü© := h

    -- Let a, b > 0. By the concavity of log (see definition B.7), we can write
    have : ‚àÄ (a b : ‚Ñù), a > 0 ‚àß b > 0 ‚Üí log (1 / p.toReal * a ^ p.toReal + 1 / q.toReal * b ^ q.toReal) ‚â• log (a * b) := by
      rintro a b ‚ü®ha, hb‚ü©
      calc
        log (1 / p.toReal * a ^ p.toReal + 1 / q.toReal * b ^ q.toReal)
        _ ‚â• 1 / p.toReal * log a ^ p.toReal + 1 / q.toReal * log b ^ q.toReal := sorry
        _ = log a + log b := sorry
        _ = log (a * b) := by rw [‚Üê log_mul (ne_of_gt ha) (ne_of_gt hb)]

    -- Taking the exponential of the left- and right-hand sides gives
    have young_inequality : ‚àÄ (a b : ‚Ñù), a > 0 ‚àß b > 0 ‚Üí
        1 / p.toReal * a ^ p.toReal + 1 / q.toReal * b ^ q.toReal ‚â• a * b := by
      rintro a b ‚ü®ha, hb‚ü©
      have hx : 1 / p.toReal * a ^ p.toReal + 1 / q.toReal * b ^ q.toReal > 0 := sorry
      have hy : a * b > 0 := sorry
      apply (log_le_log hy hx).mp (this a b ‚ü®ha, hb‚ü©)
    -- which is known as Young‚Äôs inequality.
    -- Using this inequality with a = |x j |/‚Äñx‚Äñp and b = |y j |/‚Äñy‚Äñq for j ‚àà [N ] and summing up gives
    have : (‚àë' i, ‚Äñx i‚Äñ * ‚Äñy i‚Äñ) / ‚Äñx‚Äñ * ‚Äñy‚Äñ ‚â§ 1 :=
      calc
        (‚àë' i, ‚Äñx i‚Äñ * ‚Äñy i‚Äñ) / ‚Äñx‚Äñ * ‚Äñy‚Äñ
        _ ‚â§ 1 / p.toReal * ‚Äñx‚Äñ^p.toReal / ‚Äñx‚Äñ^p.toReal + 1 / q.toReal * ‚Äñy‚Äñ^q.toReal / ‚Äñy‚Äñ^q.toReal := sorry
        _ = 1 / p.toReal + 1 / q.toReal := sorry
        _ = 1 := sorry
    -- simp [div_le_iff (by norm_num) this]
    sorry

theorem cauchy_schwarz_inequality_in_lib (x y : ‚Ñç) : ‚Äñ‚ü™x, y‚ü´‚Äñ ‚â§ ‚Äñx‚Äñ * ‚Äñy‚Äñ := norm_inner_le_norm x y


end
